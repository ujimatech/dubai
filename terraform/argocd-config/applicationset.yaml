# This ApplicationSet defines how to find the list of tenants and what to deploy for each one.
# It is the heart of the GitOps-managed application layer.
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  # The name of this ApplicationSet resource.
  name: dubai-appset
  # It must be deployed in the 'argocd' namespace to be recognized by the controller.
  namespace: argocd
spec:
  # Generators discover parameters and use them to generate ArgoCD Applications.
  # We use a Matrix generator to combine the results of two sub-generators.
  generators:
    - matrix:
        generators:
          # Generator 1: Finds the ConfigMap that lists our tenants.
          # This ConfigMap is managed by Terraform.
          - cluster:
              selector:
                matchLabels:
                  # The label used to discover the 'dubai-tenant-list' ConfigMap.
                  argocd.argoproj.io/applicationset: "dubai-tenants"

          # Generator 2: Parses the YAML content from the discovered ConfigMap.
          # The result is a list of tenants that the template can loop through.
          - list:
              elements: "{{.data['tenants.yaml'] | fromYaml}}"

  # The template for the ArgoCD Application that will be "stamped out" for each tenant.
  # It uses parameters generated by the 'list' generator above.
  template:
    metadata:
      # Creates a unique name for the parent application, e.g., "dubai-8h018eh02e".
      name: "{{`{{.element.projectName}}`}}-{{`{{.element.entityId}}`}}"
    spec:
      project: default
      source:
        # These values are taken from the tenant data in the ConfigMap.
        repoURL: "{{`{{.element.repoURL}}`}}"
        targetRevision: "{{`{{.element.targetRevision}}`}}"
        # Points to the "App of Apps" parent chart in the Git repository.
        path: "dubai-bundle"
        helm:
          releaseName: "{{`{{.element.projectName}}`}}-{{`{{.element.entityId}}`}}"
          # Pass tenant-specific parameters down to the parent Helm chart.
          parameters:
            - name: "global.entityId"
              value: "{{`{{.element.entityId}}`}}"
            - name: "global.projectName"
              value: "{{`{{.element.projectName}}`}}"
            # Explicitly pass repo details for the child apps to use.
            - name: "spec.source.repoURL"
              value: "{{`{{.element.repoURL}}`}}"
            - name: "spec.source.targetRevision"
              value: "{{`{{.element.targetRevision}}`}}"
      destination:
        server: https://kubernetes.default.svc
        # Deploy into the tenant's dedicated namespace, which is managed by Terraform.
        namespace: "{{`{{.element.projectName}}`}}-{{`{{.element.entityId}}`}}"
      syncPolicy:
        # Enable automated sync, pruning, and self-healing for all tenant apps.
        automated: { prune: true, selfHeal: true }
        # Do not allow ArgoCD to create the namespace; Terraform is responsible for it.
        syncOptions: [ "CreateNamespace=false" ]